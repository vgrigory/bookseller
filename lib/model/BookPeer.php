<?php

/**
 * Skeleton subclass for performing query and update operations on the 'book' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/28/12 07:35:04
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class BookPeer extends BaseBookPeer
{

    /**
     * Rebate given books for given amounts
     *
     *
     * @param array $values books' data to be processed
     *
     * @example $books = array(
     *                           array('id' => 1, 'rebate' => 11.3),
     *                           array('id' => 2, 'rebate' => 5),
     *                           array('id' => 3, 'rebate' => 22),
     *                       );
     *
     * @return int number of rebated books
     */
    static public function rebateBooks(array $values)
    {
        sfProjectConfiguration::getActive()->loadHelpers(array("Model"));

        $affectedRows = 0;
        foreach ($values as $bookData) {

            $book = self::retrieveByPK($bookData['id']);
            if ($book) {

                $keys = array_keys($bookData);
                foreach ($keys as $fieldName) {

                    if ($fieldName == 'id') {

                        continue;
                    }

                    $method_name = getSetterName($fieldName);
                    if (method_exists($book, $method_name)) {

                        $book->$method_name($bookData[$fieldName]);
                    }
                }


                if (count($book->getModifiedColumns())) {

                    self::doUpdate($book);
                    $affectedRows++;
                }
            }
        }

        return $affectedRows;
    }

    static public function getAverage($id = null)
    {
        $criteria = new Criteria();
        $criteria->addSelectColumn('AVG(' . BookPeer::PRICE . ')');

        if ($id) {

            $criteria->add(BookPeer::BOOKSELLER_ID, $id);
        }

        $bookStmt = self::doSelectStmt($criteria);

        return $bookStmt->fetchColumn(0);
    }

    static public function getBooks($id = null)
    {
        $criteria = new Criteria();

        if ($id) {

            $criteria->add(BookPeer::BOOKSELLER_ID, $id);
        }

        $books = self::doSelect($criteria);

        return $books;
    }

}

// BookPeer
